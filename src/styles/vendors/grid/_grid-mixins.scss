// Media query 
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}
  
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }
    @else {
        @content;
    }
}


@mixin make-container($gutter: $container-gutter) {
    width: 100%;
    padding-right: $gutter;
    padding-left: $gutter;
    margin-right: auto;
    margin-left: auto;
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint,
    $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            width: $container-max-width;
            max-width: 100%;
        }
    }
}

@mixin make-row() {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$gutter-size;
    margin-left:  -$gutter-size;
}


@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 math.percentage(math.div($size, $columns));
    max-width: math.percentage(math.div($size, $columns));
}

@mixin make-grid-columns($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
    
    $breakpoint-counter: 0;
    @each $breakpoint in map-keys($breakpoints) {
      $breakpoint-counter: ($breakpoint-counter + 1);
  
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        @for $i from 1 through $columns {
          .grid-#{$breakpoint}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }
    }
  }
  